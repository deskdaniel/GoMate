// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const getUserByName = `-- name: GetUserByName :one
SELECT id, username, created_at, updated_at, hashed_password FROM users
WHERE username = ?
`

func (q *Queries) GetUserByName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const registerUser = `-- name: RegisterUser :one

INSERT INTO users (id, username, created_at, updated_at, hashed_password)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?
)
RETURNING id, username, created_at, updated_at, hashed_password
`

type RegisterUserParams struct {
	ID             string
	Username       string
	CreatedAt      sql.NullString
	UpdatedAt      sql.NullString
	HashedPassword string
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, registerUser,
		arg.ID,
		arg.Username,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.HashedPassword,
	)
	return i, err
}

const resetUsers = `-- name: ResetUsers :exec

DELETE FROM users
`

func (q *Queries) ResetUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetUsers)
	return err
}
