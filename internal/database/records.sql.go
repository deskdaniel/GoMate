// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: records.sql

package database

import (
	"context"
	"database/sql"
)

const getRecordsByUserID = `-- name: GetRecordsByUserID :one
SELECT id, user_id, created_at, updated_at, wins, losses, draws FROM records
WHERE user_id = ?
`

func (q *Queries) GetRecordsByUserID(ctx context.Context, userID string) (Record, error) {
	row := q.db.QueryRowContext(ctx, getRecordsByUserID, userID)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Wins,
		&i.Losses,
		&i.Draws,
	)
	return i, err
}

const registerRecord = `-- name: RegisterRecord :one
INSERT INTO records (id, user_id, created_at, updated_at, wins, losses, draws)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
RETURNING id, user_id, created_at, updated_at, wins, losses, draws
`

type RegisterRecordParams struct {
	ID        string
	UserID    string
	CreatedAt sql.NullString
	UpdatedAt sql.NullString
	Wins      sql.NullInt64
	Losses    sql.NullInt64
	Draws     sql.NullInt64
}

func (q *Queries) RegisterRecord(ctx context.Context, arg RegisterRecordParams) (Record, error) {
	row := q.db.QueryRowContext(ctx, registerRecord,
		arg.ID,
		arg.UserID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Wins,
		arg.Losses,
		arg.Draws,
	)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Wins,
		&i.Losses,
		&i.Draws,
	)
	return i, err
}

const resetRecords = `-- name: ResetRecords :exec
DELETE FROM records
`

func (q *Queries) ResetRecords(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetRecords)
	return err
}

const updateRecord = `-- name: UpdateRecord :one
UPDATE records
SET
    updated_at = ?,
    wins = ?,
    losses = ?,
    draws = ?
WHERE user_id = ?
RETURNING id, user_id, created_at, updated_at, wins, losses, draws
`

type UpdateRecordParams struct {
	UpdatedAt sql.NullString
	Wins      sql.NullInt64
	Losses    sql.NullInt64
	Draws     sql.NullInt64
	UserID    string
}

func (q *Queries) UpdateRecord(ctx context.Context, arg UpdateRecordParams) (Record, error) {
	row := q.db.QueryRowContext(ctx, updateRecord,
		arg.UpdatedAt,
		arg.Wins,
		arg.Losses,
		arg.Draws,
		arg.UserID,
	)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Wins,
		&i.Losses,
		&i.Draws,
	)
	return i, err
}
